{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","todos","setTodos","todo","setTodo","todoEditing","setTodoEditing","editingText","setEditingText","useEffect","json","localStorage","getItem","loadedTodos","JSON","parse","stringify","setItem","id","onSubmit","e","preventDefault","newTodo","Date","getTime","text","completed","concat","type","onChange","target","value","map","className","checked","updatedTodos","toggleComplete","onClick","submitEdits","filter","deleteTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAwGeA,EArGH,WACV,MAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBH,IAAMC,SAAS,IAAvC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAsCL,IAAMC,SAAS,MAArD,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAsCP,IAAMC,SAAS,IAArD,mBAAOO,EAAP,KAAoBC,EAApB,KAqDA,OAnDAT,IAAMU,WAAU,WACd,IAAMC,EAAOC,aAAaC,QAAQ,SAC5BC,EAAcC,KAAKC,MAAML,GAC3BG,GACFX,EAASW,KAEV,IAEHd,IAAMU,WAAU,WACd,IAAMC,EAAOI,KAAKE,UAAUf,GAC5BU,aAAaM,QAAQ,QAASP,KAC7B,CAACT,IAyCF,sBAAKiB,GAAG,YAAR,UACE,2CACA,uBAAMC,SAzCV,SAAsBC,GACpBA,EAAEC,iBAEF,IAAMC,EAAU,CACdJ,IAAI,IAAIK,MAAOC,UACfC,KAAMtB,EACNuB,WAAW,GAEbxB,EAAS,YAAID,GAAO0B,OAAOL,IAC3BlB,EAAQ,KAgCN,UACE,uBACEwB,KAAK,OACLC,SAAU,SAACT,GAAD,OAAOhB,EAAQgB,EAAEU,OAAOC,QAClCA,MAAO5B,IAET,wBAAQyB,KAAK,SAAb,yBAED3B,EAAM+B,KAAI,SAAC7B,GAAD,OACT,sBAAmB8B,UAAU,OAA7B,UACE,sBAAKA,UAAU,YAAf,UACE,uBACEL,KAAK,WACLV,GAAG,YACHgB,QAAS/B,EAAKuB,UACdG,SAAU,kBAvCtB,SAAwBX,GACtB,IAAIiB,EAAe,YAAIlC,GAAO+B,KAAI,SAAC7B,GAIjC,OAHIA,EAAKe,KAAOA,IACdf,EAAKuB,WAAavB,EAAKuB,WAElBvB,KAETD,EAASiC,GAgCiBC,CAAejC,EAAKe,OAErCf,EAAKe,KAAOb,EACX,uBACEuB,KAAK,OACLC,SAAU,SAACT,GAAD,OAAOZ,EAAeY,EAAEU,OAAOC,UAG3C,8BAAM5B,EAAKsB,UAGf,sBAAKQ,UAAU,eAAf,UACG9B,EAAKe,KAAOb,EACX,wBAAQgC,QAAS,kBA1C7B,SAAqBnB,GACnB,IAAMiB,EAAe,YAAIlC,GAAO+B,KAAI,SAAC7B,GAInC,OAHIA,EAAKe,KAAOA,IACdf,EAAKsB,KAAOlB,GAEPJ,KAETD,EAASiC,GACT7B,EAAe,MAkCkBgC,CAAYnC,EAAKe,KAAxC,0BAEA,wBAAQmB,QAAS,kBAAM/B,EAAeH,EAAKe,KAA3C,kBAGF,wBAAQmB,QAAS,kBA9D3B,SAAoBnB,GAClB,IAAIiB,EAAe,YAAIlC,GAAOsC,QAAO,SAACpC,GAAD,OAAUA,EAAKe,KAAOA,KAC3DhB,EAASiC,GA4DsBK,CAAWrC,EAAKe,KAAvC,yBAxBMf,EAAKe,WC5DRuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.61ff1359.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [todos, setTodos] = React.useState([]);\n  const [todo, setTodo] = React.useState(\"\");\n  const [todoEditing, setTodoEditing] = React.useState(null);\n  const [editingText, setEditingText] = React.useState(\"\");\n\n  React.useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n    };\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  function submitEdits(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n    setTodoEditing(null);\n  }\n\n  return (\n    <div id=\"todo-list\">\n      <h1>Todo List</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={(e) => setTodo(e.target.value)}\n          value={todo}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"todo\">\n          <div className=\"todo-text\">\n            <input\n              type=\"checkbox\"\n              id=\"completed\"\n              checked={todo.completed}\n              onChange={() => toggleComplete(todo.id)}\n            />\n            {todo.id === todoEditing ? (\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n              />\n            ) : (\n              <div>{todo.text}</div>\n            )}\n          </div>\n          <div className=\"todo-actions\">\n            {todo.id === todoEditing ? (\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n            ) : (\n              <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n            )}\n\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}