{"version":3,"sources":["Navbar.js","App.js","app1.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","onClick","toggleMode","htmlFor","Name","App","React","useState","todos","setTodos","todo","setTodo","todoEditing","setTodoEditing","editingText","setEditingText","useEffect","json","localStorage","getItem","loadedTodos","JSON","parse","stringify","setItem","onSubmit","e","preventDefault","newTodo","Date","getTime","text","completed","concat","onChange","target","value","map","checked","updatedTodos","toggleComplete","submitEdits","filter","deleteTodo","App2","setMode","document","body","style","backgroundColor","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ce5c41cc.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n  \r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} bg-primary`}>\r\n        <div className=\"container-fluid \">\r\n          <Link className=\"navbar-brand\" to=\"/App\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\"></Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\"></Link>\r\n              </li>\r\n             \r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light' ? 'dark':'light'}`}>\r\n               <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"></input>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"Name>Enable Blue Mode</label>\r\n             </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [todos, setTodos] = React.useState([]);\n  const [todo, setTodo] = React.useState(\"\");\n  const [todoEditing, setTodoEditing] = React.useState(null);\n  const [editingText, setEditingText] = React.useState(\"\");\n\n  React.useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n    };\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  function submitEdits(id) {\n    const updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n    setTodoEditing(null);\n  }\n\n  return (\n    <div id=\"todo-list\">\n      <h1>Todo List</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={(e) => setTodo(e.target.value)}\n          value={todo}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {todos.map((todo) => (\n        <div key={todo.id} className=\"todo\">\n          <div className=\"todo-text\">\n            <input\n              type=\"checkbox\"\n              id=\"completed\"\n              checked={todo.completed}\n              onChange={() => toggleComplete(todo.id)}\n            />\n            {todo.id === todoEditing ? (\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n              />\n            ) : (\n              <div>{todo.text}</div>\n            )}\n          </div>\n          <div className=\"todo-actions\">\n            {todo.id === todoEditing ? (\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n            ) : (\n              <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n            )}\n\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n\nexport default App;\n","\r\nimport './App.css';\r\nimport Navbar from './Navbar';\r\nimport App from './App';\r\nimport {BrowserRouter as Router,Switch,Route} from \"react-router-dom\";\r\nimport React,{useState} from 'react';\r\n\r\nfunction App2() {\r\n  const [mode, setMode] = useState('light');\r\n  const toggleMode=()=>{\r\n    if(mode==='light')\r\n    {\r\n      setMode('dark');\r\n      document.body.style.backgroundColor='#669999';\r\n    }\r\n    else\r\n    {\r\n      setMode('light');\r\n      document.body.style.backgroundColor='white';\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n    <>\r\n    <Router>\r\n   <Navbar title=\"Open ToDo-List\" mode={mode} toggleMode={toggleMode} />\r\n   <div className=\"container my-10\">\r\n     <Switch>\r\n       <Route exact path=\"/App\">\r\n       <App />\r\n       </Route>\r\n     </Switch>\r\n  </div>\r\n  </Router>\r\n    </> \r\n    </>   \r\n  );\r\n \r\n}\r\n\r\nexport default App2;\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App2 from './app1';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App2 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}